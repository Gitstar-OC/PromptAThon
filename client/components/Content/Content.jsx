"use client";

import { useRef, useState, useEffect } from "react";
import Image from "next/image";
import prompts from "@/components/Prompts";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import "./style.css"; // Import the styles with image-animation keyframes

const useTypingEffect = (text, speed = 5) => {
  const [displayedText, setDisplayedText] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const fullTextRef = useRef(text);

  useEffect(() => {
    if (!isTyping) return;

    let i = 0;
    const timer = setInterval(() => {
      if (i < fullTextRef.current.length) {
        setDisplayedText(fullTextRef.current.slice(0, i + 1));
        i++;
      } else {
        clearInterval(timer);
        setIsTyping(false);
      }
    }, speed);

    return () => clearInterval(timer);
  }, [speed, isTyping]);

  const startTyping = () => {
    setDisplayedText("");
    setIsTyping(true);
  };

  return { displayedText, startTyping };
};

export default function Content() {
  const [modal, setModal] = useState({ isVisible: false, imageSrc: "", description: "" });
  const [openAccordion, setOpenAccordion] = useState(null);

  const closeModal = () => setModal({ isVisible: false, imageSrc: "", description: "" });

  return (
    <div className="max-w-4xl mx-auto py-16 text-gray-900 dark:text-gray-100">
      {Object.values(prompts).map((prompt, index) => (
        <div key={index} className="my-16 pb-8">
          <div className="image-container items-center justify-center flex">
            <Image
              src={prompt.imagePath}
              alt={`Image ${index + 1}`}
              width={700}
              height={350}
              className="rounded-lg transition-transform image-animation duration-700 ease-out cursor-pointer"
              onClick={() => {
                setModal({ isVisible: true, imageSrc: prompt.imagePath, description: prompt.prompt });
                setOpenAccordion(index);
              }}
            />
          </div>

          <Accordion
            type="single"
            collapsible
            className="w-full mt-2 flex justify-center"
            onValueChange={(value) => setOpenAccordion(value === `item-${index}` ? index : null)}
          >
            <AnimatedAccordionItem
              key={index}
              title="Prompt"
              content={prompt.prompt}
              value={`item-${index}`}
              isOpen={openAccordion === index}
            />
          </Accordion>

          <p className="text-center mt-4 text-gray-900 dark:text-gray-500">
            Generated by: <span className="text-blue-500 underline">{prompt.generatedBy}</span>
          </p>

          {/* Line below the "Generated by" text */}
          <div className="w-full h-px bg-gray-300 mt-4 rounded-xl bg-black dark:bg-white" />
        </div>
      ))}

      {modal.isVisible && (
        <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50" onClick={closeModal}>
          <div className="relative max-w-3xl w-full p-8 bg-white dark:bg-neutral-900 rounded-lg shadow-lg" onClick={(e) => e.stopPropagation()}>
            <button
              className="absolute top-2 right-2 text-gray-900 dark:text-gray-100 text-3xl focus:outline-none"
              onClick={closeModal}
            >
              &times;
            </button>
            <Image src={modal.imageSrc} alt="Selected Image" width={800} height={450} className="rounded-lg" />
          </div>
        </div>
      )}
    </div>
  );
}

function AnimatedAccordionItem({ title, content, value, isOpen }) {
  const { displayedText, startTyping } = useTypingEffect(content);
  const [hasOpened, setHasOpened] = useState(false);

  useEffect(() => {
    if (isOpen && !hasOpened) {
      setHasOpened(true);
      startTyping();
    }
  }, [isOpen, hasOpened, startTyping]);

  return (
    <AccordionItem value={value} className={`border-b w-[40rem] border-neutral-800 dark:border-neutral-300 rounded-2xl ${isOpen ? "dark:bg-black bg-white" : ""}`}>
      <AccordionTrigger className="text-lg text-neutral-900 dark:text-gray-300 font-medium py-4 px-2 hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors rounded-2xl">
        {title}
      </AccordionTrigger>
      <AccordionContent className="py-4 px-2 text-neutral-900 dark:text-gray-300">
        <p>{displayedText}</p>
      </AccordionContent>
    </AccordionItem>
  );
}
